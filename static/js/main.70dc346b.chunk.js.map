{"version":3,"sources":["firebase.js","assets/blond.png","assets/green-and-black.png","assets/mustache.png","assets/summer-hat.png","assets/dino-head.png","assets/black-hair.png","helpers/getIconImages.js","components/user_settings/IconRadioButton.js","components/user_settings/ColorRadioButton.js","helpers/getFirstNameFromFullName.js","components/user_settings/UserSettingsForm.js","helpers/getUserIconImg.js","assets/spinner.svg","helpers/getMessageClr.js","components/styled_components/MessageStyles.js","components/chat_room/ChatMessages.js","components/chat_room/SendImageMsg.js","components/chat_room/NewMessageForm.js","components/styled_components/GeneralStyles.js","components/chat_room/User.js","helpers/objectsAreEqual.js","helpers/getUsersLastVisit.js","components/chat_room/OnlineUsersList.js","components/chat_room/Sidebar.js","components/chat_room/ChatRoom.js","components/LoadingSpinner.js","components/SignIn.js","components/App.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","auth","getUserIcons","name","img","blond","black_hair","dino_head","summer_hat","glasses_and_mustache","green_and_black_hair","IconRadioButton","icon","setUserIcon","userIcon","htmlFor","type","id","checked","value","onChange","e","target","width","height","src","alt","ColorRadioButton","clr","setUserColor","userColor","className","getFirstNameFromFullName","fullName","split","UserSettingsForm","updatingSettings","userSettingsSet","userData","setUserData","userSettingsOpen","loadingSpinnerOn","moveToChatRoom","currentUser","uid","displayName","iconArr","useState","chatName","userName","setUserName","themeColor","chatIcon","submitSettings","preventDefault","formValues","undefined","updateUserSettings","then","r","window","location","reload","firstTimeSubmittingSettings","console","log","a","collection","doc","update","prev","prevData","createdAt","lastSeen","error","userDocument","FieldValue","serverTimestamp","set","onClick","style","marginTop","onSubmit","map","getUserIconImg","imgName","iconImg","icons","i","length","getMessageClr","Message","styled","div","props","msgClass","color","MessageContainer","SenderInfo","p","SentTime","ChatMessage","message","text","imageUrl","senderName","senderIcon","messageClass","messageSentTime","timestamp","currentDate","Date","wholeDate","seconds","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minutes","getMinutes","getMsgCreatedTime","info","ChatMessages","changingMessageSettings","scrollDownRef","useRef","messages","setMessages","loading","setLoading","useEffect","orderBy","limit","onSnapshot","snapshot","docs","data","current","scrollIntoView","behavior","margin","spinner","msg","index","uniqid","ref","padding","SendImageMsg","action","file","files","document","getElementById","reset","match","photoURL","add","messageRef","filePath","storage","put","fileSnapshot","getDownloadURL","url","storageUri","metadata","fullPath","catch","saveImageMessage","onMediaFileSelected","accept","capture","NewMessageForm","formValue","setFormValue","sendMessage","placeholder","Main","main","grid","SignInSection","UserColor","User","user","objectsAreEqual","other","Object","prototype","toString","call","indexOf","valueLen","keys","compare","item1","item2","itemType","key","hasOwnProperty","getUsersLastVisit","Number","nanoseconds","UpdateCurrentUser","timer","setTimer","interval","setInterval","clearInterval","updateUserDocument","checkIfUserIsOnline","currentTimestamp","addNewUserDocument","setLoadingComplete","OnlineUsersList","usersData","setUsersData","onlineUsers","setOnlineUsers","setCurrentUser","loadingComplete","onlineUsersFromDB","allUsersData","push","getAllOnlineUsers","get","currentUserDoc","exists","fetchData","Sidebar","logOff","setUserSettingsOpen","biggerScreen","innerWidth","sidebarOpen","setSidebarOpen","sidebarWidth","querySelector","gridTemplateColumns","toggleSidebar","ChatRoom","LoadingSpinner","gridArea","signInWithGoogle","provider","GoogleAuthProvider","test","navigator","userAgent","isMobileDevice","signInWithPopup","signInWithRedirect","SignIn","App","currentUserData","setCurrentUserData","setUserSettingsSet","firstLogin","setFirstLogin","useAuthState","returnToDefaultStates","signOut","ChatRoomOrSettings","getUserData","userDoc","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.70dc346b.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDaHvjWQBPbi_8qb-53ZZYw6YlMmog89Ig\",\r\n    authDomain: \"superchat-be9ab.firebaseapp.com\",\r\n    projectId: \"superchat-be9ab\",\r\n    storageBucket: \"superchat-be9ab.appspot.com\",\r\n    messagingSenderId: \"547015847672\",\r\n    appId: \"1:547015847672:web:427a9f137fe980ba27d50d\"\r\n};\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebaseApp.auth();\r\n\r\nexport { db, auth };\r\n","export default __webpack_public_path__ + \"static/media/blond.9071513f.png\";","export default __webpack_public_path__ + \"static/media/green-and-black.d9d39ac6.png\";","export default __webpack_public_path__ + \"static/media/mustache.6c401d7b.png\";","export default __webpack_public_path__ + \"static/media/summer-hat.c46117c4.png\";","export default __webpack_public_path__ + \"static/media/dino-head.35afc71d.png\";","export default __webpack_public_path__ + \"static/media/black-hair.68bdd4da.png\";","import blond from \"../assets/blond.png\"\r\nimport green_and_black_hair from \"../assets/green-and-black.png\"\r\nimport glasses_and_mustache from \"../assets/mustache.png\"\r\nimport summer_hat from \"../assets/summer-hat.png\"\r\nimport dino_head from \"../assets/dino-head.png\"\r\nimport black_hair from \"../assets/black-hair.png\"\r\n\r\n\r\nexport default function getUserIcons() {\r\n    return [\r\n        {\r\n            name: 'blonde-hair',\r\n            img: blond,\r\n        },\r\n        {\r\n            name: 'black-hair',\r\n            img: black_hair,\r\n        },\r\n        {\r\n            name: 'dino-head',\r\n            img: dino_head,\r\n        },\r\n        {\r\n            name: 'summer_hat',\r\n            img: summer_hat,\r\n        },\r\n        {\r\n            name: 'glasses-and-mustache',\r\n            img: glasses_and_mustache,\r\n        },\r\n        {\r\n            name: 'green-and-black-hair',\r\n            img: green_and_black_hair,\r\n        }\r\n    ];\r\n}","function IconRadioButton ({icon, setUserIcon, userIcon}) {\r\n    \r\n    return (\r\n        <label htmlFor={ icon.name }>\r\n            <input type=\"radio\" id={ icon.name } checked={ userIcon === icon.name } value={ icon.name }\r\n                   onChange={ (e) => setUserIcon(e.target.value) }/>\r\n            <img width=\"50\" height=\"50\" src={ icon.img } alt={ `${ icon.name } user icon` }/>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default IconRadioButton;\r\n","function ColorRadioButton ({clr, setUserColor, userColor}) {\r\n    \r\n    return (\r\n        <label htmlFor={ `${ clr }-color` } className=\"clr-container\">\r\n            <input type=\"radio\" name=\"radio\" id={ `${ clr }-color` } checked={ userColor === clr } value={ clr }\r\n                   onChange={ (e) => setUserColor(e.target.value) }/>\r\n            <span id={ clr } className=\"checkmark\"/>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default ColorRadioButton;\r\n","function getFirstNameFromFullName (fullName) {\r\n    const nameArr = fullName.split(' ');\r\n    return nameArr[0];\r\n}\r\n\r\nexport default getFirstNameFromFullName;\r\n","import React, { useState } from \"react\";\r\nimport { auth, db } from \"../../firebase\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport getUserIcons from \"../../helpers/getIconImages\";\r\nimport IconRadioButton from \"./IconRadioButton\";\r\nimport ColorRadioButton from \"./ColorRadioButton\";\r\n\r\nimport getFirstNameFromFullName from \"../../helpers/getFirstNameFromFullName\";\r\n\r\nfunction UserSettingsForm ({\r\n                               updatingSettings, // is user updating settings or setting them first time\r\n                               userSettingsSet, // user settings has been set\r\n                               userData,\r\n                               setUserData, // set current user data\r\n                               userSettingsOpen, // is settings pop uo open or closed\r\n                               loadingSpinnerOn, // adds loading spinner to screen when user is updating settings\r\n                               moveToChatRoom,\r\n                           }) {\r\n    \r\n    const {uid, displayName} = auth.currentUser;\r\n    const iconArr = getUserIcons();\r\n    \r\n    const [userName, setUserName] = useState(updatingSettings ? userData.chatName : getFirstNameFromFullName(displayName));\r\n    const [userColor, setUserColor] = useState(updatingSettings ? userData.themeColor : '');\r\n    const [userIcon, setUserIcon] = useState(updatingSettings ? userData.chatIcon : '');\r\n    \r\n    function submitSettings (e) {\r\n        e.preventDefault();\r\n        const formValues = {\r\n            chatName: userName === undefined || userName === '' ? getFirstNameFromFullName(displayName) : userName,\r\n            chatIcon: userIcon,\r\n            themeColor: userColor === undefined || userColor === '' ? 'pink' : userColor,\r\n        }\r\n        if ( updatingSettings ) {\r\n            loadingSpinnerOn(true);\r\n            updateUserSettings(formValues)\r\n                .then(r => window.location.reload());\r\n        } else {\r\n            firstTimeSubmittingSettings(formValues, moveToChatRoom)\r\n                .then(r => console.log('user settings submitted'));\r\n        }\r\n    }\r\n    \r\n    async function updateUserSettings (formValues) {\r\n        try {\r\n            await db.collection(\"users\").doc(uid).update(formValues);\r\n            \r\n            userSettingsOpen(() => false);\r\n            setUserData((prev) => {\r\n                // data that does not need to be updated\r\n                const prevData = {\r\n                    createdAt: prev.createdAt,\r\n                    lastSeen: prev.lastSeen,\r\n                    fullName: prev.fullName\r\n                }\r\n                return {...prevData, ...formValues};\r\n            })\r\n        } catch (e) {\r\n            console.error(\"Error when updating user settings document: \", e)\r\n        }\r\n    }\r\n    \r\n    async function firstTimeSubmittingSettings (formValues, moveToChatRoom) {\r\n        userSettingsSet(true);\r\n        \r\n        const userDocument = {\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            lastSeen: firebase.firestore.FieldValue.serverTimestamp(),\r\n            fullName: displayName,\r\n            uid,\r\n            chatName: formValues.chatName,\r\n            chatIcon: formValues.chatIcon,\r\n            themeColor: formValues.themeColor,\r\n        };\r\n        // First set changed to firebase\r\n        try {\r\n            await db.collection(\"users\").doc(uid).set(userDocument)\r\n            setUserData(() => userDocument); // set user data to user document, so it can be accessed later\r\n            moveToChatRoom(true);\r\n            console.log(\"Document successfully added to collection!\")\r\n        } catch (e) {\r\n            console.error(\"Error when adding user settings document: \", e)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"pop-up\">\r\n            { updatingSettings ? <div className=\"close_cont\"><i className=\"fas fa-times close-settings\"\r\n                                                                onClick={ () => userSettingsOpen(() => false) }/>\r\n            </div> : <></> }\r\n            <h2 style={ {marginTop: updatingSettings ? 'initial' : '1em'} }>{ updatingSettings ? 'Update' : 'Choose your user' } settings</h2>\r\n            <form onSubmit={ (e) => submitSettings(e) }>\r\n                <div className=\"settings__cont\">\r\n                    <p>User name</p>\r\n                    <input className=\"settings__name\" type=\"text\" value={ userName }\r\n                           onChange={ (e) => setUserName(e.target.value) }/>\r\n                </div>\r\n                <div className=\"settings__cont\">\r\n                    <p>Theme color</p>\r\n                    <div className=\"flex\">\r\n                        <ColorRadioButton clr=\"yellow\" userColor={ userColor } setUserColor={ setUserColor }/>\r\n                        <ColorRadioButton clr=\"blue\" userColor={ userColor } setUserColor={ setUserColor }/>\r\n                        <ColorRadioButton clr=\"purple\" userColor={ userColor } setUserColor={ setUserColor }/>\r\n                        <ColorRadioButton clr=\"pink\" userColor={ userColor } setUserColor={ setUserColor }/>\r\n                        <ColorRadioButton clr=\"green\" userColor={ userColor } setUserColor={ setUserColor }/>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"settings__cont settings__icons\">\r\n                    <p>Chat icon</p>\r\n                    <div className=\"flex\">\r\n                        { iconArr.map((icon) => {\r\n                            return <IconRadioButton icon={ icon } userIcon={ userIcon } setUserIcon={ setUserIcon }/>\r\n                        }) }\r\n                    </div>\r\n                </div>\r\n                \r\n                <button className=\"btn btn__settings\" type=\"submit\">Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default UserSettingsForm;\r\n","import getUserIcons from \"./getIconImages\";\r\nimport black_hair from \"../assets/black-hair.png\" // default value\r\n\r\nexport default function getUserIconImg(imgName) {\r\n    const icons = getUserIcons();\r\n    let iconImg;\r\n    for (let i = 0; i < icons.length; i++) {\r\n        let icon = icons[i];\r\n        if ( icon.name === imgName ) {\r\n            iconImg = icon.img\r\n        }\r\n    }\r\n    return iconImg ? iconImg : black_hair;\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/spinner.07408e1a.svg\";","function getMessageClr(clr) {\r\n    switch (clr) {\r\n        case('yellow'):\r\n            return '#FFC68A';\r\n        case ('green'):\r\n            return '#4acfac';\r\n        case('pink'):\r\n            return '#ffa2bb';\r\n        case ('purple'):\r\n            return '#7e8ce0';\r\n        case('blue'):\r\n            return '#36c7d0';\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nexport default getMessageClr;\r\n","import styled from \"styled-components\";\r\nimport getMessageClr from \"../../helpers/getMessageClr\";\r\n\r\nconst Message = styled.div`\r\n  width: fit-content;\r\n  max-width: 90%;\r\n  padding: 0.5em 0.7em;\r\n  color: #212121;\r\n  border-radius: ${ props=>props.msgClass === \"msg__sent\" ? \"25px 25px 2px 25px\" : \"25px 25px 25px 2px\" };\r\n  background-color: ${ props=>getMessageClr(props.color) };\r\n`;\r\n\r\nconst MessageContainer = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n  flex-direction: ${ props=>props.msgClass === \"msg__sent\" ? \"row-reverse\" : \"row\" };\r\n`;\r\n\r\nconst SenderInfo = styled.p`\r\n  font-size: 0.6rem;\r\n  font-style: italic;\r\n  margin-left: ${ props=>props.msgClass === \"msg__sent\" ? \"auto\" : \"3em\" };\r\n  margin-right: ${ props=>props.msgClass === \"msg__sent\" ? \"3em\" : \"initial\" };\r\n  text-align: ${ props=>props.msgClass === \"msg__sent\" ? \"right\" : \"left\" };\r\n  @media (min-width: 700px) {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst SentTime = styled(SenderInfo)`\r\n  font-size: 0.5rem;\r\n  color: black;\r\n  letter-spacing: 1px;\r\n  margin-left: ${ props=>props.msgClass === \"msg__sent\" ? \"auto\" : \"0\" };\r\n  margin-right: ${ props=>props.msgClass === \"msg__sent\" ? \"0\" : \"initial\" };\r\n  @media (min-width: 700px) {\r\n    font-size: 0.6rem;\r\n  }\r\n`;\r\n\r\nexport {\r\n    Message,\r\n    MessageContainer,\r\n    SenderInfo,\r\n    SentTime,\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { auth, db } from \"../../firebase\";\r\n\r\nimport uniqid from \"uniqid\";\r\nimport getUserIconImg from \"../../helpers/getUserIconImg\";\r\n\r\nimport spinner from \"../../assets/spinner.svg\";\r\nimport { Message, MessageContainer, SenderInfo, SentTime } from \"../styled_components/MessageStyles\";\r\n\r\nfunction ChatMessages ({changingMessageSettings}) {\r\n    const scrollDownRef = useRef();\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        console.log('messages loaded');\r\n        db.collection('messages').orderBy('createdAt').limit(50)\r\n          .onSnapshot((snapshot) => {\r\n              setMessages(snapshot.docs.map(doc => doc.data()));\r\n              setLoading(false);\r\n          })\r\n    }, [])\r\n    \r\n    // Scrolls chatroom so newest message is at bottom when page first loads and every time new message arrives\r\n    useEffect(() => {\r\n        if ( !loading ) {\r\n            scrollDownRef.current.scrollIntoView({behavior: \"smooth\"});\r\n        }\r\n    }, [loading, messages])\r\n    \r\n    // When user is changing their settings and press submit, set loading to true and after updating user settings\r\n    // to message documents are done change loading to false. So loading spinner is shown on the screen.\r\n    useEffect(() => {\r\n        setLoading(!loading)\r\n    }, [changingMessageSettings])\r\n    \r\n    \r\n    if ( loading ) {\r\n        return (\r\n            <section className=\"messages__container\">\r\n                <img width={ 90 } height={ 90 } style={ {margin: \"2em auto\"} } src={ spinner } alt=\"loading\"/>\r\n            </section>\r\n        )\r\n    } else {\r\n        return (\r\n            <section className=\"messages__container\">\r\n                { messages.map((msg, index) => {\r\n                    return <ChatMessage key={ uniqid() } message={ msg }/>\r\n                }) }\r\n                <div ref={ scrollDownRef } style={ {padding: '0.5em'} }/>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction ChatMessage ({message}) {\r\n    const {text, uid, imageUrl, senderName, senderIcon, color, createdAt} = message;\r\n    // Give different styling depending if msg is sent by current user or received\r\n    const messageClass = uid === auth.currentUser.uid ? 'msg__sent' : 'msg__received';\r\n    const messageSentTime = getMsgCreatedTime(createdAt);\r\n    \r\n    if ( createdAt ) {\r\n        return (\r\n            <div className=\"message\">\r\n                <SenderInfo info={ \"name\" }\r\n                            msgClass={ messageClass }>{ messageClass === 'msg__sent' ? 'You' : senderName }</SenderInfo>\r\n                <MessageContainer msgClass={ messageClass }>\r\n                    <img width={ 25 } height={ 25 } src={ getUserIconImg(senderIcon) }\r\n                         alt={ `${ senderIcon } user icon` }/>\r\n                    <Message msgClass={ messageClass } color={ color }>\r\n                        { imageUrl ? <img className=\"msg__img\" src={ imageUrl } alt=\"image message\"/> :\r\n                            < p> { text }</p> }\r\n                        <SentTime msgClass={ messageClass }>{ messageSentTime }</SentTime>\r\n                    </Message>\r\n                </MessageContainer>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nfunction getMsgCreatedTime (timestamp) {\r\n    const currentDate = new Date();\r\n    if ( timestamp ) {\r\n        const wholeDate = new Date(timestamp.seconds * 1000);\r\n        const year = wholeDate.getFullYear();\r\n        const month = wholeDate.getMonth();\r\n        const day = wholeDate.getDate();\r\n        const hour = wholeDate.getHours();\r\n        let minutes = wholeDate.getMinutes();\r\n        \r\n        // If the message is send in the same day as today, return only time, else return date\r\n        if ( currentDate.getMonth() === month && currentDate.getDate() === day ) {\r\n            if ( minutes < 10 ) {\r\n                minutes = '0' + minutes\r\n            }\r\n            return `${ hour }:${ minutes }`\r\n        }\r\n        return `${ day }/${ month + 1 }/${ year }`\r\n    }\r\n    \r\n    \r\n}\r\n\r\nexport default ChatMessages;\r\n","import React from 'react';\r\nimport { auth, db } from \"../../firebase\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport spinner from \"../../assets/spinner.svg\";\r\n\r\n\r\nfunction SendImageMsg({currentUser}) {\r\n    return (\r\n        <form id=\"image-form\" className=\"img-form\" action=\"#\">\r\n            <label htmlFor=\"mediaCapture\" className=\"add-image__label\">\r\n                <i className=\"fas fa-camera add-image__icon\"/>\r\n            </label>\r\n            <input onChange={ (e)=>onMediaFileSelected(e, currentUser) } id=\"mediaCapture\" type=\"file\" accept=\"image/*\"\r\n                   capture=\"camera\" className=\"custom-file-input\"/>\r\n        </form>\r\n    );\r\n}\r\n\r\nfunction onMediaFileSelected(e, currentUser) {\r\n    e.preventDefault();\r\n    const file = e.target.files[0];\r\n    // Clear the selection in the file picker input.\r\n    document.getElementById('image-form').reset();\r\n\r\n    // Check if the file is an image.\r\n    if ( !file.type.match('image.*') ) {\r\n        return;\r\n    }\r\n    saveImageMessage(file, currentUser);\r\n}\r\n\r\n// Saves a new message containing an image in Firebase.\r\n// This first saves the image in Firebase storage.\r\nfunction saveImageMessage(file, currentUser) {\r\n    const {uid, photoURL} = auth.currentUser;\r\n    const messagesRef = db.collection('messages');\r\n\r\n    // 1 - We add a message with a loading icon that will get updated with the shared image.\r\n    messagesRef.add({\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        photoURL,\r\n        color: currentUser.themeColor,\r\n        senderName: currentUser.chatName,\r\n        senderIcon: currentUser.chatIcon,\r\n        imageUrl: spinner,\r\n\r\n    }).then((messageRef)=>{\r\n        // 2 - Upload the image to Cloud Storage.\r\n        const filePath = firebase.auth().currentUser.uid + '/' + messageRef.id + '/' + file.name;\r\n        return firebase.storage().ref(filePath).put(file).then((fileSnapshot)=>{\r\n            // 3 - Generate a public URL for the file.\r\n            return fileSnapshot.ref.getDownloadURL().then((url)=>{\r\n                // 4 - Update the chat message placeholder with the image's URL.\r\n                return messageRef.update({\r\n                    imageUrl: url,\r\n                    storageUri: fileSnapshot.metadata.fullPath\r\n                });\r\n            });\r\n        });\r\n    }).catch((error)=>console.error('There was an error uploading a file to Cloud Storage:', error));\r\n}\r\n\r\n\r\nexport default SendImageMsg;\r\n","import React, { useState } from \"react\";\r\nimport { auth, db } from \"../../firebase\";\r\nimport firebase from \"firebase/app\";\r\nimport SendImageMsg from \"./SendImageMsg\";\r\n\r\nfunction NewMessageForm ({currentUser}) {\r\n    // Value that is in the form\r\n    const [formValue, setFormValue] = useState('');\r\n    \r\n    // writes new message document to firestore db\r\n    async function sendMessage (e) {\r\n        e.preventDefault();\r\n        const {uid} = auth.currentUser;\r\n        try {\r\n            setFormValue(''); // empties the form\r\n            await db.collection('messages').add({\r\n                senderName: currentUser.chatName,\r\n                senderIcon: currentUser.chatIcon,\r\n                text: formValue,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid,\r\n                color: currentUser.themeColor,\r\n            })\r\n        } catch (e) {\r\n            console.log('error happened when adding new message:', e)\r\n        }\r\n    }\r\n    \r\n    \r\n    return (\r\n        <section className=\"form-flex\">\r\n            <SendImageMsg currentUser={ currentUser }/>\r\n            <form className=\"msg-form\" onSubmit={ (e) => sendMessage(e) }>\r\n                <input type=\"text\" placeholder=\"Send message...\" value={ formValue }\r\n                       onChange={ (e) => setFormValue(e.target.value) }/>\r\n                <button type=\"submit\"><i className=\"fas fa-share add-msg__icon\"/></button>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default NewMessageForm;\r\n","import styled from \"styled-components\";\r\nimport getMessageClr from \"../../helpers/getMessageClr\";\r\n\r\nconst Main = styled.main`\r\n  width: 100%;\r\n  max-height: 97vh;\r\n  min-height: 95vh;\r\n  max-width: 700px;\r\n  display: ${ props=>props.grid ? 'grid' : 'block' };\r\n  grid-template-columns: 50px repeat(2, 1fr);\r\n  grid-template-rows: 60px repeat(3, 1fr) 60px;\r\n  background-color: #2d2d2d;\r\n  color: #e7e7e7;\r\n  border-radius: 20px;\r\n  box-shadow: rgba(0, 0, 0, 0.24) 0 3px 8px;\r\n  transition: all 0.3s ease-in-out;\r\n  @media (min-width: 600px) {\r\n    grid-template-columns: 200px repeat(2, 1fr);\r\n    grid-template-rows: 60px repeat(3, 1fr) 80px;\r\n  }\r\n`;\r\n\r\nconst SignInSection = styled.div`\r\n  width: 100%;\r\n  max-width: 500px;\r\n  min-height: 300px;\r\n  padding: 1em;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n\r\n  & > header h1 {\r\n    border-bottom: 2px solid #7e8ce0;\r\n  }\r\n\r\n  & > section {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    margin: 2em auto;\r\n\r\n    & > p {\r\n      font-weight: bolder;\r\n      letter-spacing: 1px;\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst UserColor = styled.div`\r\n  padding: 0.5em;\r\n  border-radius: 50px;\r\n  background-color: ${ props=>getMessageClr(props.color) };`;\r\n\r\n\r\nexport {\r\n    Main,\r\n    SignInSection,\r\n    UserColor,\r\n}","import React from 'react';\r\nimport { UserColor } from \"../styled_components/GeneralStyles\";\r\n\r\nfunction User({user, currentUser}) {\r\n\r\n    return (\r\n        <div className=\"flex online__user\">\r\n            <UserColor color={ user.themeColor }/>\r\n            <p>{ currentUser ? 'You' : user.chatName }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","function objectsAreEqual(value, other) {\r\n    // Get the value type\r\n    let type = Object.prototype.toString.call(value);\r\n\r\n    // If the two objects are not the same type, return false\r\n    if ( type !== Object.prototype.toString.call(other) ) return false;\r\n\r\n    // If items are not an object or array, return false\r\n    if ( ['[object Array]', '[object Object]'].indexOf(type) < 0 ) return false;\r\n\r\n    // Compare the length of the length of the two items\r\n    let valueLen = type === '[object Array]' ? value.length : Object.keys(value).length;\r\n    let otherLen = type === '[object Array]' ? other.length : Object.keys(other).length;\r\n    if ( valueLen !== otherLen ) return false;\r\n\r\n    // Compare two items\r\n    function compare(item1, item2) {\r\n\r\n        // Get the object type\r\n        let itemType = Object.prototype.toString.call(item1);\r\n\r\n        // If an object or array, compare recursively\r\n        if ( ['[object Array]', '[object Object]'].indexOf(itemType) >= 0 ) {\r\n            if ( !objectsAreEqual(item1, item2) ) return false;\r\n        }\r\n\r\n        // Otherwise, do a simple comparison\r\n        else {\r\n            // If the two items are not the same type, return false\r\n            if ( itemType !== Object.prototype.toString.call(item2) ) return false;\r\n\r\n            // Else if it's a function, convert to a string and compare\r\n            // Otherwise, just compare\r\n            if ( itemType === '[object Function]' ) {\r\n                if ( item1.toString() !== item2.toString() ) return false;\r\n            } else {\r\n                if ( item1 !== item2 ) return false;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // Compare properties\r\n    if ( type === '[object Array]' ) {\r\n        for (let i = 0; i < valueLen; i++) {\r\n            if ( compare(value[i], other[i]) === false ) return false;\r\n        }\r\n    } else {\r\n        for (let key in value) {\r\n            if ( value.hasOwnProperty(key) ) {\r\n                if ( compare(value[key], other[key]) === false ) return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If nothing failed, return true\r\n    return true;\r\n}\r\n\r\nexport default objectsAreEqual;","function getUsersLastVisit(user) {\r\n    if ( user.lastSeen ) {\r\n        return Number(user.lastSeen.seconds + '.' + user.lastSeen.nanoseconds);\r\n    }\r\n}\r\n\r\nexport default getUsersLastVisit;","import React, { useEffect, useState } from 'react';\r\nimport { auth, db } from \"../../firebase\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport spinner from \"../../assets/spinner.svg\";\r\nimport User from \"./User\";\r\nimport objectsAreEqual from \"../../helpers/objectsAreEqual\";\r\nimport uniqid from \"uniqid\";\r\n\r\nimport getUsersLastVisit from \"../../helpers/getUsersLastVisit\";\r\n\r\nfunction OnlineUsersList () {\r\n    const [usersData, setUsersData] = useState([]);\r\n    const [onlineUsers, setOnlineUsers] = useState([]);\r\n    \r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loadingComplete, setLoadingComplete] = useState(false);\r\n    \r\n    const {uid} = auth.currentUser;\r\n    \r\n    // First get the data from users database and save it to usersData\r\n    useEffect(() => {\r\n        try {\r\n            db.collection('users').orderBy('createdAt').limit(100)\r\n              .onSnapshot((snapshot) => {\r\n                  setUsersData(snapshot.docs.map(doc => doc.data()));\r\n              })\r\n        } catch (e) {\r\n            console.log('error happened when fetching all user data', e);\r\n        }\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        // This returns all users (except current user) that has been seen on the server in last minute\r\n        const onlineUsersFromDB = getAllOnlineUsers(usersData);\r\n        // compare arr from onlineUsersFromDB and current onlineUsers list if there is differences merge\r\n        // onlineUsersFromDB to current onlineUsers list otherwise do nothing\r\n        const listsAreEqual = objectsAreEqual(onlineUsersFromDB, onlineUsers);\r\n        \r\n        if ( !listsAreEqual ) {\r\n            setOnlineUsers(() => onlineUsersFromDB);\r\n        }\r\n    }, [usersData])\r\n    \r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const currentUserDoc = await db.collection('users').doc(uid).get();\r\n                if ( currentUserDoc.exists ) {\r\n                    setCurrentUser(currentUserDoc.data());\r\n                    setLoadingComplete(true);\r\n                } else {\r\n                    await addNewUserDocument(setLoadingComplete);\r\n                }\r\n            } catch (e) {\r\n                console.log('error happened when fetching current user document from db', e);\r\n            }\r\n        }\r\n        fetchData().then(r => console.log('data fetched'))\r\n        return () => console.log('unmounting...');\r\n    }, []);\r\n    \r\n    \r\n    if ( loadingComplete ) {\r\n        return (\r\n            <div className=\"users__list\">\r\n                <h2>Chat users </h2>\r\n                <User key={ uniqid() } user={ currentUser } currentUser={ true }/>\r\n                { onlineUsers.map((user) => {\r\n                    return <User key={ uniqid() } user={ user }/>;\r\n                }) }\r\n                <UpdateCurrentUser/>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"users__list\">\r\n                <h2>Chat users </h2>\r\n                <img width={ 50 } height={ 50 } style={ {margin: '2em auto'} } src={ spinner } alt=\"loading spinner\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction UpdateCurrentUser () {\r\n    const [timer, setTimer] = useState(0);\r\n    const {uid} = auth.currentUser;\r\n    \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimer(prev => prev + 1)\r\n        }, 100000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n    \r\n    // Update user document every 1min, so other users can see if you are online or not\r\n    useEffect( () => {\r\n        async function updateUserDocument(){\r\n            try {\r\n                await db.collection(\"users\").doc(uid).update({\r\n                    lastSeen: firebase.firestore.FieldValue.serverTimestamp(),\r\n                })\r\n            } catch (e) {\r\n                console.error(\"Error updating document: \", e); // The document probably doesn't exist.\r\n            }\r\n        }\r\n        updateUserDocument().then(r => console.log(''))\r\n        \r\n    }, [timer]);\r\n    \r\n    return <></>\r\n}\r\n\r\nfunction checkIfUserIsOnline (user) {\r\n    const currentTimestamp = new Date() / 1000;\r\n    const userLastSeen = getUsersLastVisit(user);\r\n    \r\n    // is online if they have been seen in last 3min on server\r\n    return userLastSeen >= (currentTimestamp - 60)\r\n}\r\n\r\nfunction getAllOnlineUsers (allUsersData) {\r\n    const {uid} = auth.currentUser;\r\n    let onlineUsers = [];\r\n    for (let i = 0; i < allUsersData.length; i++) { // loop all of the data from users database\r\n        const userData = allUsersData[i]; // one user from database\r\n        const userIsOnline = checkIfUserIsOnline(userData);\r\n        \r\n        if ( userIsOnline ) {\r\n            if ( userData.uid !== uid ) { // if online user is NOT same as current user push it to the list\r\n                onlineUsers.push({\r\n                    themeColor: userData.themeColor,\r\n                    chatIcon: userData.chatIcon,\r\n                    chatName: userData.chatName,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return onlineUsers;\r\n}\r\n\r\nasync function addNewUserDocument (setLoadingComplete) {\r\n    try {\r\n        const {uid, displayName} = auth.currentUser;\r\n        \r\n        await db.collection(\"users\").doc(uid).set({\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            lastSeen: firebase.firestore.FieldValue.serverTimestamp(),\r\n            uid,\r\n            name: displayName\r\n        })\r\n        setLoadingComplete(true);\r\n        console.log(\"Document successfully added to collection!\");\r\n    } catch (e) {\r\n        console.error(\"Error when adding new user document: \", e);\r\n    }\r\n}\r\n\r\n\r\nexport default OnlineUsersList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport OnlineUsersList from \"./OnlineUsersList\";\r\n\r\nfunction Sidebar({logOff, setUserSettingsOpen}) {\r\n    const biggerScreen = window.innerWidth >= 600; // Different styles on mobile devices and bigger screens\r\n    const [sidebarOpen, setSidebarOpen] = useState(biggerScreen);\r\n\r\n    return (\r\n        <>\r\n            <section className=\"sidebar\">\r\n                <i className={ `fas ${ sidebarOpen ? 'fa-times' : 'fa-bars' } sidebar__toggle` }\r\n                   onClick={ ()=>toggleSidebar(sidebarOpen, setSidebarOpen) }/>\r\n\r\n                <div className={ `sidebar__content ${ sidebarOpen ? 'visible' : 'hidden' }` }>\r\n                    <OnlineUsersList/>\r\n                    <button className=\"btn btn__settings\" onClick={ ()=>setUserSettingsOpen(true) }>Settings <i\r\n                        className=\"fas fa-cog\"/></button>\r\n                    <button className=\"btn btn__sign-out\" onClick={ ()=>logOff() }>Sign out\r\n                    </button>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction toggleSidebar(sidebarOpen, setSidebarOpen) {\r\n    const sidebarWidth = !sidebarOpen ? window.innerWidth >= 600 ? 200 : 150 : 50;\r\n    document.querySelector(\"main\").style.gridTemplateColumns = `${ sidebarWidth }px repeat(2, 1fr)`;\r\n    setSidebarOpen(prev=>!prev);\r\n}\r\n\r\nexport default Sidebar;","import React, { useState } from \"react\";\r\nimport UserSettingsForm from \"../user_settings/UserSettingsForm\";\r\nimport ChatMessages from \"./ChatMessages\";\r\nimport NewMessageForm from \"./NewMessageForm\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nfunction ChatRoom({userData, logOff}) {\r\n    const [currentUser, setCurrentUser] = useState(userData);\r\n    const [userSettingsOpen, setUserSettingsOpen] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <header className=\"chat__header\">\r\n                <h2>Hello { currentUser.chatName }!</h2>\r\n                <p> Welcome to Super chat!</p>\r\n            </header>\r\n\r\n            <Sidebar setUserSettingsOpen={ setUserSettingsOpen } logOff={ logOff }/>\r\n\r\n            <ChatMessages changingMessageSettings={ loading }/>\r\n\r\n            <NewMessageForm currentUser={ currentUser }/>\r\n\r\n            { userSettingsOpen ?\r\n                <UserSettingsForm updatingSettings={ true } userData={ userData } setUserData={ setCurrentUser }\r\n                                  userSettingsOpen={ setUserSettingsOpen }\r\n                                  loadingSpinnerOn={ setLoading }/> : <></> }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ChatRoom;\r\n","import spinner from \"../assets/spinner.svg\";\r\nimport React from \"react\";\r\n\r\nfunction LoadingSpinner() {\r\n    return <img width={ 90 } height={ 90 } style={ {margin: \"2em auto\", gridArea: \"1/2/2/2\"} } src={ spinner }\r\n                alt=\"loading\"/>\r\n}\r\n\r\nexport default LoadingSpinner;","import React from \"react\";\r\n\r\nimport firebase from \"firebase/app\";\r\nimport { auth } from \"../firebase\";\r\n\r\nimport { SignInSection } from \"./styled_components/GeneralStyles\";\r\n\r\nfunction SignIn() {\r\n\r\n    return (\r\n        <SignInSection>\r\n            <header>\r\n                <h1>Welcome to Super Chat</h1>\r\n            </header>\r\n            <section>\r\n                <p>So that you can start chatting with other users please sign in:</p>\r\n                <div onClick={ signInWithGoogle } className=\"google-btn\">\r\n                    <div className=\"google-icon-wrapper\">\r\n                        <img className=\"google-icon\" alt=\"google logo\"\r\n                             src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"/>\r\n                    </div>\r\n                    <p className=\"btn-text\"><b>Sign in with google</b></p>\r\n                </div>\r\n            </section>\r\n        </SignInSection>\r\n    )\r\n}\r\n\r\n\r\nfunction signInWithGoogle() {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    if ( isMobileDevice() ) {\r\n        auth.signInWithRedirect(provider).then(()=> {\r\n            console.log('Redirecting to google authentication successful')\r\n        }).catch((error)=>{\r\n            console.log(\"Error redirecting:\", error);\r\n        });\r\n    } else {\r\n        auth.signInWithPopup(provider).then(()=> {\r\n            console.log('Opening pop-up to google authentication successful')\r\n        }).catch((error)=>{\r\n            console.log(\"Error getting pop up:\", error);\r\n        });\r\n    }\r\n}\r\n\r\nfunction isMobileDevice() {\r\n    if ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n        return true\r\n    }\r\n}\r\n\r\nexport default SignIn;\r\n","import React, { useState } from 'react';\r\n\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { auth, db } from '../firebase'\r\n\r\nimport ChatRoom from \"./chat_room/ChatRoom\";\r\nimport UserSettingsForm from \"./user_settings/UserSettingsForm\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport SignIn from \"./SignIn\";\r\n\r\nimport { Main } from \"./styled_components/GeneralStyles\";\r\n\r\nfunction App () {\r\n    const [currentUserData, setCurrentUserData] = useState();\r\n    const [userSettingsSet, setUserSettingsSet] = useState(false);\r\n    const [loadingComplete, setLoadingComplete] = useState(false);\r\n    const [firstLogin, setFirstLogin] = useState(false);\r\n    \r\n    const [user, loading] = useAuthState(auth); // true if firebase.User is logged in, false if not\r\n    /*\r\n     useEffect(()=>{\r\n     const timestamp = firebase.firestore.Timestamp.now();\r\n     let fourDaysAgo = timestamp.seconds - (96 * 60 * 60); // timestamp for four days ago\r\n     \r\n     // Deletes all messages from firestore messages database which are MORE than four days old\r\n     db.collection(\"messages\").where(\"createdAt\", \"<\", fourDaysAgo)\r\n     .get().then((querySnapshot)=>{\r\n     querySnapshot.forEach(element=>{\r\n     element.ref.delete().then(()=>console.log('element successfully deleted'));\r\n     });\r\n     })\r\n     }, [])*/\r\n    \r\n    // When user signs out from chat, return states to they default states\r\n    function returnToDefaultStates () {\r\n        auth.signOut().then(() => console.log('user has signed off'));\r\n        setUserSettingsSet(false);\r\n        setLoadingComplete(false);\r\n        setFirstLogin(false);\r\n    }\r\n    \r\n    function ChatRoomOrSettings () {\r\n        // default state, user is signed in but loading is not complete. This should run first when page is loaded\r\n        if ( !firstLogin && !loadingComplete && !userSettingsSet ) {\r\n            getUserData().then(() => {\r\n                console.log('default state')\r\n                return <LoadingSpinner/>\r\n            })\r\n        }\r\n        // First login, open first user settings form so user can select color and icon and then opens chatroom\r\n        if ( firstLogin ) {\r\n            if ( !loadingComplete && userSettingsSet ) {\r\n                return <LoadingSpinner/>\r\n            }\r\n            if ( loadingComplete && userSettingsSet ) {\r\n                console.log('second state')\r\n                return <ChatRoom logOff={ returnToDefaultStates } userData={ currentUserData }/>\r\n            }\r\n            return <UserSettingsForm updatingSettings={ false } setUserData={ setCurrentUserData }\r\n                                     userSettingsSet={ setUserSettingsSet } moveToChatRoom={ setLoadingComplete }/>\r\n        }\r\n        // if NOT first login, go straight to chat room\r\n        if ( loadingComplete && userSettingsSet ) {\r\n            return <ChatRoom logOff={ returnToDefaultStates } userData={ currentUserData }/>\r\n        } else {\r\n            return <LoadingSpinner/>\r\n        }\r\n    }\r\n    \r\n    async function getUserData () {\r\n        const {uid} = auth.currentUser;\r\n        try {\r\n            const userDoc = await db.collection(\"users\").doc(uid).get();\r\n            if ( userDoc.exists ) {\r\n                console.log('user doc exists', userDoc.data())\r\n                setCurrentUserData(() => userDoc.data());\r\n                setUserSettingsSet(true);\r\n                setLoadingComplete(true);\r\n            } else { // Users first login\r\n                setFirstLogin(true);\r\n            }\r\n        } catch (e) {\r\n            console.log('Error when getting user document first time', e);\r\n        }\r\n    }\r\n    \r\n    if ( loading ) {\r\n        return (\r\n            <Main grid={ true }>\r\n                { <LoadingSpinner/> }\r\n            </Main>\r\n        )\r\n    } else {\r\n        return (\r\n            <Main grid={ user }>\r\n                { user ? <ChatRoomOrSettings/> : <SignIn/> }\r\n            </Main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport \"./main.css\";\r\nimport App from \"./components/App\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}